Product Requirements Document (PRD)  
Title : Per-Server Configuration & Namespaced Tools for MCP Graph Greeter  
Owner : You
Last updated : Now

────────────────────────────────────────────────────────────────────────
1. Problem / Opportunity
────────────────────────────────────────────────────────────────────────
Today the MCP Graph Greeter hard-codes:
• all server endpoints in one Python module (`config.py`)  
• one flat list of *allowed* and *sensitive* tool names  
• tool names that are not globally unique (e.g. multiple servers could expose `write_file`)

This approach hampers:
– onboarding a new MCP server (code changes & redeploy)  
– reasoning about which tool comes from which server  
– governance of sensitive operations per server  
– automated validation or linting of configuration

────────────────────────────────────────────────────────────────────────
2. Objective & Success Criteria
────────────────────────────────────────────────────────────────────────
Build a data-driven mechanism that lets us:
 A. declare each server’s endpoint, allowed tools, and sensitive tools in its own JSON file  
 B. namespace every tool as `<server_name>.<tool_name>` to guarantee uniqueness  
 C. dynamically load these configurations at runtime without touching source code  
 D. maintain the existing CLI UX—no breaking change for end-users

Success metrics
• Adding a new MCP server requires **0** code changes (just drop a JSON)  
• Graph boots successfully with ≥1 server and correct tool counts (CI test)  
• No namespace collisions reported in logs  
• Sensitive-tool review flow still triggers only on designated namespaced tools

────────────────────────────────────────────────────────────────────────
3. Scope
────────────────────────────────────────────────────────────────────────
In-scope
• JSON schema & loader for server configs  
• Refactor of `mcp_graph_greeter.py` to consume the loader, namespace tools, and adapt review logic  
• Unit tests for loader, namespacing, and sensitive-tool detection  
• Update documentation / README

Out-of-scope
• UI/CLI changes to expose server info (future work)  
• Feature parity enhancements for any individual tool

────────────────────────────────────────────────────────────────────────
4. User Stories
────────────────────────────────────────────────────────────────────────
US-1 (DevOps)  
“As an infra engineer, I can add a new MCP server by committing `<name>.json` so that the Greeter immediately supports its tools after redeploy.”

US-2 (Security)  
“As a security reviewer, I can specify which tools are sensitive per server, ensuring write-capable tools always trigger human approval.”

US-3 (Developer)  
“As a developer, I can call a tool using its namespaced identifier, avoiding accidental collisions when two servers expose a tool with the same base name.”

────────────────────────────────────────────────────────────────────────
5. Functional Requirements
────────────────────────────────────────────────────────────────────────
FR-1 The application MUST read all `*.json` files in `config/servers/` at startup.  
FR-2 Each JSON MUST include: `server_name`, `endpoint`, `allowed_tools[]`, `sensitive_tools[]`.  
FR-3 The system MUST create a `MultiServerMCPClient` with the union of endpoints.  
FR-4 When fetching tools the system MUST rename each tool to `<server_name>.<original>` and store the original in metadata.  
FR-5 Graph construction MUST filter tools to those in `allowed_tools` of their server.  
FR-6 Sensitive-tool review MUST trigger when the namespaced tool string appears in the server’s `sensitive_tools`.  
FR-7 On error (e.g., malformed JSON, duplicate names after namespacing) the system MUST fail fast with a clear log.

────────────────────────────────────────────────────────────────────────
6. Non-Functional Requirements
────────────────────────────────────────────────────────────────────────
NFR-1 Loader execution adds ≤50 ms to startup per server (tested with 10 servers).  
NFR-2 The change MUST be backward-compatible for existing CLI scripts invoking the Greeter.  
NFR-3 Unit-test coverage for loader and namespacing ≥90 %.  
NFR-4 JSON schema validation errors MUST indicate file path and missing keys.

────────────────────────────────────────────────────────────────────────
7. Technical Overview
────────────────────────────────────────────────────────────────────────
• New directory `config/servers/` contains one JSON per server.  
• `config/loader.py` – utility that loads & validates configs, returns list[dict].  
• Modify `graph_factory()` in `mcp_graph_greeter.py`:  
  – call loader → build `server_map`, `allowed_map`, `sensitive_map`  
  – instantiate `MultiServerMCPClient(server_map)`  
  – fetch tools once and rename (`tool.name = f"{server}.{tool.name}"`)  
• `review_tool_calls` splits namespaced name on `"."` to test sensitivity.  
• Add helper `split_namespaced(name) → (server, tool)`.
